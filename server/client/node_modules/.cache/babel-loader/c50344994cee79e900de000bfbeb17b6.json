{"ast":null,"code":"import _classCallCheck from \"/Users/aminakano/Mytinerary/server/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/aminakano/Mytinerary/server/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/aminakano/Mytinerary/server/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/aminakano/Mytinerary/server/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/aminakano/Mytinerary/server/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/aminakano/Mytinerary/server/client/src/Filter.js\";\nimport React, { Component } from 'react';\nimport CityData from './json.json';\nimport CityDisplay from './CityDisplay';\nimport City from './City';\nimport { connect } from 'react-redux';\nimport * as actionCreator from './Store/Actions/actions';\n\nvar Filter =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Filter, _Component);\n\n  function Filter() {\n    var _this;\n\n    _classCallCheck(this, Filter);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Filter).call(this));\n\n    _this.handleButtonValue = function (city) {\n      var cityName = city.charAt(0).toLowerCase() + city.slice(1).replace(/\\s+/g, \"\").toLowerCase();\n      window.location.href = \"MYtinerary/\" + cityName;\n    };\n\n    _this.route = function (city) {\n      return \"/MYtinerary/\".concat(city.cityName);\n    };\n\n    _this.filterList = function (e) {\n      if (e.target.value == \"\") {\n        _this.setState({\n          filtered: _this.props.cities\n        });\n      } else {\n        var updateList = _this.props.cities.filter(function (item) {\n          return item.cityName.toLowerCase().search(e.target.value.toLowerCase()) !== -1;\n        });\n\n        _this.setState({\n          filtered: updateList\n        });\n      }\n    };\n\n    _this.state = {\n      filtered: [],\n      counter: 0\n    };\n    return _this;\n  }\n\n  _createClass(Filter, [{\n    key: \"render\",\n    value: function render() {\n      // if(this.props.citiesIsLoaded == true ){\n      //     this.state.counter++;\n      //     if(this.state.counter == 1){\n      //         this.setState({\n      //             filtered:this.props.cities\n      //         })\n      //     }    \n      // }\n      //stylings\n      var formStyle = {\n        display: 'flex',\n        justifyContent: 'center',\n        paddingBottom: '5%' // sorting array ascending\n\n      };\n\n      if (this.props.citiesIsLoaded == true) {\n        // const sortArray = this.state.filtered.sort(function(a,b){\n        //     if(a.cityName < b.cityName) return -1;\n        //     if(a.cityName > b.cityName) return 1;\n        //     return 0;\n        // })\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"cities\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, this.state.filtered.map(function (obj, index) {\n          return React.createElement(City, {\n            key: index,\n            city: obj,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68\n            },\n            __self: this\n          });\n        })));\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, \"Loading...\");\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.fetchCities();\n    }\n  }]);\n\n  return Filter;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    cities: state.cities,\n    citiesIsLoaded: state.citiesIsLoaded\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchCities: function fetchCities() {\n      return dispatch(actionCreator.fetchCities());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter); // {this.state.filtered.map((obj, index)=>{\n//     return( <div><div className=\"cityNames\">{obj.name}</div><img src={obj.image} alt=\"destinations\" style={styles}/></div>)\n//  })}\n// onClick = {\n//     () => {\n//         this.handleButtonValue(obj.cityName)\n//     }\n// }","map":{"version":3,"sources":["/Users/aminakano/Mytinerary/server/client/src/Filter.js"],"names":["React","Component","CityData","CityDisplay","City","connect","actionCreator","Filter","handleButtonValue","city","cityName","charAt","toLowerCase","slice","replace","window","location","href","route","filterList","e","target","value","setState","filtered","props","cities","updateList","filter","item","search","state","counter","formStyle","display","justifyContent","paddingBottom","citiesIsLoaded","map","obj","index","fetchCities","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,aAAZ,MAA+B,yBAA/B;;IAEMC,M;;;;;AACF,oBAAa;AAAA;;AAAA;;AACT;;AADS,UAObC,iBAPa,GAOO,UAACC,IAAD,EAAQ;AACxB,UAAIC,QAAQ,GAAGD,IAAI,CAACE,MAAL,CAAY,CAAZ,EAAeC,WAAf,KAA6BH,IAAI,CAACI,KAAL,CAAW,CAAX,EAAcC,OAAd,CAAsB,MAAtB,EAA8B,EAA9B,EAAkCF,WAAlC,EAA5C;AAEAG,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,gBAAgBP,QAAvC;AACH,KAXY;;AAAA,UAYbQ,KAZa,GAYL,UAAAT,IAAI,EAAI;AACZ,mCAAsBA,IAAI,CAACC,QAA3B;AACH,KAdY;;AAAA,UAebS,UAfa,GAeF,UAACC,CAAD,EAAK;AACZ,UAAGA,CAAC,CAACC,MAAF,CAASC,KAAT,IAAkB,EAArB,EAAyB;AACrB,cAAKC,QAAL,CAAc;AAACC,UAAAA,QAAQ,EAAE,MAAKC,KAAL,CAAWC;AAAtB,SAAd;AAEH,OAHD,MAGO;AACP,YAAMC,UAAU,GAAG,MAAKF,KAAL,CAAWC,MAAX,CAAkBE,MAAlB,CAAyB,UAACC,IAAD,EAAQ;AAChD,iBAAOA,IAAI,CAACnB,QAAL,CAAcE,WAAd,GAA4BkB,MAA5B,CAAmCV,CAAC,CAACC,MAAF,CAASC,KAAT,CAAeV,WAAf,EAAnC,MAAqE,CAAC,CAA7E;AACH,SAFkB,CAAnB;;AAGA,cAAKW,QAAL,CAAc;AAACC,UAAAA,QAAQ,EAAEG;AAAX,SAAd;AACC;AACJ,KAzBY;;AAET,UAAKI,KAAL,GAAW;AACPP,MAAAA,QAAQ,EAAC,EADF;AAEPQ,MAAAA,OAAO,EAAE;AAFF,KAAX;AAFS;AAMZ;;;;6BAoBO;AACJ;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,UAAMC,SAAS,GAAE;AACbC,QAAAA,OAAO,EAAC,MADK;AAEbC,QAAAA,cAAc,EAAC,QAFF;AAGbC,QAAAA,aAAa,EAAC,IAHD,CAKjB;;AALiB,OAAjB;;AAMA,UAAG,KAAKX,KAAL,CAAWY,cAAX,IAA6B,IAAhC,EAAqC;AACjC;AACA;AACA;AACA;AACA;AAEJ,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAII;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACK,KAAKN,KAAL,CAAWP,QAAX,CAAoBc,GAApB,CAAwB,UAACC,GAAD,EAAMC,KAAN,EAAc;AACnC,iBACI,oBAAC,IAAD;AAAM,YAAA,GAAG,EAAEA,KAAX;AAAkB,YAAA,IAAI,EAAED,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH,SAJA,CADL,CAJJ,CADJ;AAeC,OAtBD,MAsBO;AACH,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ;AAGH;AACJ;;;wCACkB;AACf,WAAKd,KAAL,CAAWgB,WAAX;AAEH;;;;EA5EgBxC,S;;AA+ErB,IAAMyC,eAAe,GAAE,SAAjBA,eAAiB,CAACX,KAAD,EAAS;AAC5B,SAAO;AACHL,IAAAA,MAAM,EAAEK,KAAK,CAACL,MADX;AAEHW,IAAAA,cAAc,EAAEN,KAAK,CAACM;AAFnB,GAAP;AAIH,CALD;;AAMA,IAAMM,kBAAkB,GAAC,SAAnBA,kBAAmB,CAACC,QAAD,EAAY;AACjC,SAAM;AACFH,IAAAA,WAAW,EAAE;AAAA,aAAIG,QAAQ,CAACtC,aAAa,CAACmC,WAAd,EAAD,CAAZ;AAAA;AADX,GAAN;AAGH,CAJD;;AAMA,eAAepC,OAAO,CAACqC,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CpC,MAA7C,CAAf,C,CAIA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react';\nimport CityData from './json.json';\nimport CityDisplay from './CityDisplay';\nimport City from './City';\nimport { connect } from 'react-redux';\nimport * as actionCreator from './Store/Actions/actions';\n\nclass Filter extends Component{\n    constructor(){\n        super()\n        this.state={               \n            filtered:[],\n            counter: 0,\n        }       \n    } \n    handleButtonValue = (city)=>{\n        var cityName = city.charAt(0).toLowerCase()+city.slice(1).replace(/\\s+/g, \"\").toLowerCase();\n        \n        window.location.href = \"MYtinerary/\" + cityName;\n    }\n    route = city => {\n        return `/MYtinerary/${city.cityName}`\n    }   \n    filterList=(e)=>{\n        if(e.target.value == \"\") {\n            this.setState({filtered: this.props.cities})\n\n        } else {\n        const updateList = this.props.cities.filter((item)=>{\n            return item.cityName.toLowerCase().search(e.target.value.toLowerCase()) !== -1;\n        })\n        this.setState({filtered: updateList})\n        }\n    }\n    render(){\n        // if(this.props.citiesIsLoaded == true ){\n        //     this.state.counter++;\n\n        //     if(this.state.counter == 1){\n        //         this.setState({\n        //             filtered:this.props.cities\n        //         })\n        //     }    \n        // }\n        //stylings\n           \n        const formStyle ={\n            display:'flex',\n            justifyContent:'center',\n            paddingBottom:'5%'\n        }\n        // sorting array ascending\n        if(this.props.citiesIsLoaded == true){\n            // const sortArray = this.state.filtered.sort(function(a,b){\n            //     if(a.cityName < b.cityName) return -1;\n            //     if(a.cityName > b.cityName) return 1;\n            //     return 0;\n            // })\n            \n        return(\n            <div>\n                {/* <form style={formStyle}>\n                     <input type=\"text\" placeholder=\"Search your destination!\" onChange={this.filterList} className=\"filterText\"/>                     \n                </form> */}\n                <div className=\"cities\">                   \n                    {this.state.filtered.map((obj, index)=>{\n                        return( \n                            <City key={index} city={obj}></City>\n                        )\n                    })}\n                </div>\n\n            </div>\n        )\n        } else {\n            return (\n                <div>Loading...</div>\n            )\n        }\n    }\n    componentDidMount(){\n        this.props.fetchCities();\n    \n    }\n}\n\nconst mapStateToProps =(state)=>{\n    return {\n        cities: state.cities,\n        citiesIsLoaded: state.citiesIsLoaded\n    }\n}\nconst mapDispatchToProps=(dispatch)=>{\n    return{\n        fetchCities: ()=>dispatch(actionCreator.fetchCities())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\n\n\n// {this.state.filtered.map((obj, index)=>{\n//     return( <div><div className=\"cityNames\">{obj.name}</div><img src={obj.image} alt=\"destinations\" style={styles}/></div>)\n//  })}\n\n\n\n// onClick = {\n//     () => {\n//         this.handleButtonValue(obj.cityName)\n//     }\n// }"]},"metadata":{},"sourceType":"module"}